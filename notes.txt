

Make a Member class -- we wont need to store these objects since they go directly into the DB, but i think it will clean things up

do you know how we will make the IDs? does oracle or sql have something that we do it for us or will we need to write functions to create unique IDs
 -- I am not sure, but I think Oracle will auto generate the IDs for us... I'll figure it out once we get there
 -- We are gonna need to make the IDs ourselves... my thought is just using a count... maybe a string plus a running count somehow

Q: Do we need constructors? I feel like we should just use the objects to perform actions in the database...
   bc we aren't gonna actually store an object for every member in the DB, for example.


Also, there are tables that i think we need to populate on our own

- employee tables
- ski resort properties
- lifts
- lesson types
- probably more stuff too, we can figure exactly what needs to be inputed vs manually populated especially for dependencies




TODO:
DONE - Write Classes for all components with relevant Add/Update/Delete Components OR are part of queries
- Write UI code in Prog4
DONE - Go in and physically create tables in Oracle on chosen account
DONE - Populate Entries into tables
DONE - Create Test Suite to Test & Fix Existing code
	DONE - Try all functionalities
	DONE - Try all queries
- Complete design.pdf
	- E-R Diagram (final)
	- Logical DB design
	- Normalization Analysis
	- Query Descriptions
- Complete readme.txt
	- Compilation & Execution instructions
	- Workload Distribution
- Present to TAs



Notes as I code:
- do we have to check if like phone number is a valid "XXX-XXX-XXXX" type? might be extra work tho if not needed. -I'm fine with not checking this...
- same idea for email, is @xxx.com needed? im guessing maybe not (hopefully not but wanted to note it just incase) -I'm also fine not checking this...
- does the way that java handles the date the same way that sql handles dates? same format and all? (i will look into this) -Yeah I'm not sure either... tbd

- im like 85% done with the Member class, i will pick back up there since it got late - thanks!

Seth Notes 5/2
- I created the superclass ResortComponent... it includes the following repeated functionalities
	- Creating a new ID for a table (createNewId())
	- Check if a certain item with id exists in a table (existsId())
	- createNewTransaction()
	- Delete From Where common SQL query (deleteFromWhere())
We could potentially work to move more things up to the superclass,
but these are the ones that I found are obviously repeating. Moving them
to superclass decreased code a ton already... The other functionality that i
left in specific classes tended to have components specific to that class.

- Do we need assertions on some things: (Would suck lol)
	- check sizing of certain rental items
	- check levels of certain trails / lifts
	- level of instructors
	- etc



Marco notes 5/2
- it might be helpful to have a debug method that checks all the tables with a memberid to make sure that it got deleted properly
	- we dont want to have any lingering memberids that should already be deleted

- i will look into potentially making the delete method use private methods to make it shorter

Seth Notes 5/3
I have tested and debugged: Member, SkiPass, Equipment, Rental, and Lesson
All of them work as expected (some edge cases aren't tested)
We should be good to create the UI now, using examples from the testing file (functionalityTest.java)